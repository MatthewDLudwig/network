{"version":3,"file":"network.js","sources":["../secure-utils/reflection/reflection.js","../secure-utils/random/random.js","../boruca-messaging/src/rpc.js","../boruca-messaging/src/event-server.js","../nano-api/nano-network-api.js","network.js"],"sourcesContent":["export default class Reflection {\n    /** @param {Object} proto\n     *\n     * @returns {Set<string>}\n     */\n    static userFunctions(proto) {\n        return new Set(Reflection._deepFunctions(proto).filter(name => {\n            return name !== 'constructor'\n                && name !== 'fire'\n                && name[0] !== '_';\n        }));\n    }\n\n    /** @param {Object} proto\n     *\n     * @returns {string[]}\n     */\n    static _deepFunctions(proto) {\n        if (!proto || proto === Object.prototype) return [];\n\n        const ownProps = Object.getOwnPropertyNames(proto);\n\n        const ownFunctions = ownProps.filter(name => {\n            const desc = Object.getOwnPropertyDescriptor(proto, name);\n            return !!desc && typeof desc.value === 'function';\n        });\n\n        const deepFunctions = Reflection._deepFunctions(Object.getPrototypeOf(proto));\n\n        return [...ownFunctions, ...deepFunctions];\n    }\n}\n","export default class Random {\n    static getRandomId() {\n        let array = new Uint32Array(1);\n        crypto.getRandomValues(array);\n        return array[0];\n    }\n}\n","import Reflection from '/libraries/secure-utils/reflection/reflection.js';\nimport Random from '/libraries/secure-utils/random/random.js';\n\nexport default class RPC {\n    /**\n     * @param {Window} targetWindow\n     * @param {string} interfaceName\n     * @param {string} [targetOrigin]\n     * @returns {Promise}\n     */\n    static async Client(targetWindow, interfaceName, targetOrigin = '*') {\n        return new Promise((resolve, reject) => {\n            let connected = false;\n\n            const interfaceListener = (message) => {\n                if (message.source !== targetWindow\n                    || message.data.status !== 'OK'\n                    || message.data.interfaceName !== interfaceName\n                    || (targetOrigin !== '*' && message.origin !== targetOrigin)) return;\n\n                self.removeEventListener('message', interfaceListener);\n\n                connected = true;\n\n                resolve( new (RPC._Client(targetWindow, targetOrigin, interfaceName, message.data.result))() );\n            };\n\n            self.addEventListener('message', interfaceListener);\n\n\n            let connectTimer;\n            const timeoutTimer = setTimeout(() => {\n                reject(new Error('Connection timeout'));\n                clearTimeout(connectTimer);\n            }, 10000);\n\n            const tryToConnect = () => {\n                if (connected) {\n                    clearTimeout(timeoutTimer);\n                    return;\n                }\n\n                try {\n                    targetWindow.postMessage({ command: 'getRpcInterface', interfaceName, id: 0 }, targetOrigin);\n                } catch (e){\n                    console.log('postMessage failed:' + e);\n                }\n                connectTimer = setTimeout(tryToConnect, 1000);\n            };\n\n            connectTimer = setTimeout(tryToConnect, 100);\n        });\n    }\n\n\n    /**\n     * @param {Window} targetWindow\n     * @param {string} interfaceName\n     * @param {array} functionNames\n     * @returns {Class}\n     * @private\n     */\n    static _Client(targetWindow, targetOrigin, interfaceName, functionNames) {\n        const Client = class {\n            constructor() {\n                this.availableMethods = functionNames;\n                // Svub: Code smell that _targetWindow and _waiting are visible outside. Todo later!\n                /** @private\n                 *  @type {Window} */\n                this._targetWindow = targetWindow;\n                this._targetOrigin = targetOrigin;\n                /** @private\n                 *  @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                self.addEventListener('message', this._receive.bind(this));\n            }\n\n            close() {\n                self.removeEventListener('message', this._receive.bind(this));\n            }\n\n            _receive({ source, origin, data }) {\n                // Discard all messages from unwanted sources\n                // or which are not replies\n                // or which are not from the correct interface\n                if (source !== this._targetWindow\n                    || !data.status\n                    || data.interfaceName !== interfaceName\n                    || (this._targetOrigin !== '*' && origin !== this._targetOrigin)) return;\n\n                const callback = this._waiting.get(data.id);\n\n                if (!callback) {\n                    console.log('Unknown reply', data);\n                } else {\n                    this._waiting.delete(data.id);\n\n                    if (data.status === 'OK') {\n                        callback.resolve(data.result);\n                    } else if (data.status === 'error') {\n                        const { message, stack, code } = data.result;\n                        const error = new Error(message);\n                        error.code = code;\n                        error.stack = stack;\n                        callback.error(error);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = { command, interfaceName, args, id: Random.getRandomId() };\n                    this._waiting.set(obj.id, { resolve, error });\n                    this._targetWindow.postMessage(obj, '*');\n                    // no timeout for now, as some actions require user interactions\n                    // todo maybe set timeout via parameter?\n                    //setTimeout(() => error(new Error ('request timeout')), 10000);\n                });\n            }\n        };\n\n        for (const functionName of functionNames) {\n            Client.prototype[functionName] = function (...args) {\n                return this._invoke(functionName, args);\n            };\n        }\n\n        return Client;\n    }\n\n    /**\n     * @param {Class} clazz: The class whose methods will be made available via postMessage RPC\n     * @param {boolean} useAccessControl: If set, message.source and message.origin will be passed as first two arguments to each method.\n     * @return {T extends clazz}\n     */\n    static Server(clazz, useAccessControl) {\n        return new (RPC._Server(clazz, useAccessControl))();\n    }\n\n    static _Server(clazz, useAccessControl) {\n        const Server = class extends clazz {\n            constructor() {\n                super();\n                this._name = Server.prototype.__proto__.constructor.name;\n                self.addEventListener('message', this._receive.bind(this));\n            }\n\n            close() {\n                self.removeEventListener('message', this._receive.bind(this));\n            }\n\n            _replyTo(message, status, result) {\n                message.source.postMessage({ status, result, interfaceName: this._name, id: message.data.id }, message.origin);\n            }\n\n            _receive(message) {\n                try {\n                    if (message.data.interfaceName !== this._name) return;\n\n                    let args = message.data.args || [];\n\n                    if (useAccessControl && message.data.command !== 'getRpcInterface') {\n                        // Inject calling origin to function args\n                        args = [{ callingWindow: message.source, callingOrigin: message.origin }, ...args];\n                    }\n\n                    /* deactivate this since there is no security issue and by wrapping in acl length info gets lost\n                    // Test if request calls an existing method with the right number of arguments\n                    const calledMethod = this[message.data.command];\n                    if (!calledMethod) {\n                        throw `Non-existing method ${message.data.command} called: ${message}`;\n                    }\n\n                    if (calledMethod.length < args.length) {\n                        throw `Too many arguments passed: ${message}`;\n                    }*/\n\n                    const result = this._invoke(message.data.command, args);\n\n                    if (result instanceof Promise) {\n                        result\n                            .then((finalResult) => this._replyTo(message, 'OK', finalResult))\n                            .catch(e => this._replyTo(message, 'error',\n                                e.message ? { message: e.message, stack: e.stack, code: e.code } : { message: e } ));\n                    } else {\n                        this._replyTo(message, 'OK', result);\n                    }\n                } catch (e) {\n                    this._replyTo(message, 'error',\n                        e.message ? { message: e.message, stack: e.stack, code: e.code } : { message: e } );\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n        };\n\n        // Collect function names of the Server's interface\n        Server.prototype._rpcInterface = [];\n        for (const functionName of Reflection.userFunctions(clazz.prototype)) {\n            Server.prototype._rpcInterface.push(functionName);\n        }\n        Server.prototype._rpcInterface.push('getRpcInterface');\n\n        // Add function to retrieve the interface\n        Server.prototype['getRpcInterface'] = function() {\n            if(this.onConnected) this.onConnected.call(this);\n            return Server.prototype._rpcInterface;\n        };\n\n        return Server;\n    }\n}\n\n// TODO: Handle unload/load events (how?)\n","import RPC from './rpc.js';\n\nexport default class EventServer {\n    constructor() {\n        this._listeners = new Map();\n        const that = this;\n        RPC.Server(class EventRPCServer {\n            on({ callingWindow, callingOrigin }, event) {\n                if (!that._listeners.get(event)) {\n                    that._listeners.set(event, new Map());\n                }\n                that._listeners.get(event).set(callingWindow, callingOrigin);\n            }\n\n            off({ callingWindow, callingOrigin }, event) {\n                const eventEntry = that._listeners.get(event)\n                if (eventEntry.get(callingWindow) !== callingOrigin) return;\n\n                eventEntry.delete(callingWindow);\n                if (that._listeners.get(event).length === 0) {\n                    that._listeners.delete(event);\n                }\n            }\n\n            onConnected() {\n                that.onConnected();\n            }\n        }, true);\n    }\n\n    fire(event, value) {\n        if (!this._listeners.get(event)) return;\n\n        for (const [callingWindow, callingOrigin] of this._listeners.get(event)) {\n            callingWindow.postMessage({event, value}, callingOrigin);\n        }\n    }\n\n    onConnected() { }\n}\n","export default class NanoNetworkApi {\n\n    // static get API_URL() { return 'https://cdn.nimiq-network.com/branches/master/nimiq.js' }\n    /*\n    @asset(/dist/nimiq.js)\n    @asset(/dist/web.js)\n    @asset(/dist/worker.js)\n    @asset(/dist/worker-wasm.js)\n    @asset(/dist/worker-wasm.wasm)\n    */\n    static get API_URL() { return '/dist/nimiq.js' }\n    static get satoshis() { return 1e5 }\n\n    static getApi() {\n        this._api = this._api || new NanoNetworkApi();\n        return this._api;\n    }\n\n    constructor() {\n        this._apiInitialized = new Promise(async (resolve) => {\n            await NanoNetworkApi._importApi();\n            await Nimiq.load();\n            // setTimeout(resolve, 500);\n            resolve();\n        });\n        this._createConsensusPromise();\n\n        this._balances = new Map();\n    }\n\n    async connect() {\n        await this._apiInitialized;\n        Nimiq.GenesisConfig.bounty();\n        this._consensus = await Nimiq.Consensus.volatileNano();\n        this._consensus.on('syncing', e => this._onConsensusSyncing());\n        this._consensus.on('established', e => this.__consensusEstablished());\n        this._consensus.on('lost', e => this._consensusLost());\n\n        // this._consensus.on('sync-finished', e => console.log('consensus sync-finished'));\n        // this._consensus.on('sync-failed', e => console.log('consensus sync-failed'));\n        // this._consensus.on('sync-chain-proof', e => console.log('consensus sync-chain-proof'));\n        // this._consensus.on('verify-chain-proof', e => console.log('consensus verify-chain-proof'));\n\n        this._consensus.network.connect();\n\n        this._consensus.blockchain.on('head-changed', block => this._headChanged(block.header));\n        this._consensus.mempool.on('transaction-added', tx => this._transactionAdded(tx));\n        // this._consensus.mempool.on('transaction-expired', tx => this._transactionExpired(tx));\n        this._consensus.mempool.on('transaction-mined', (tx, header) => this._transactionMined(tx, header));\n        this._consensus.network.on('peers-changed', () => this._onPeersChanged());\n    }\n\n    async _headChanged(header) {\n        if (!this._consensus.established) return;\n        const balances = await this._getBalances([...this._balances.keys()]);\n\n        for (const [address, balance] of balances) {\n            if (this._balances.get(address) === balance) {\n                balances.delete(address);\n                continue;\n            }\n\n            this._balances.set(address, balance);\n        }\n\n        if (balances.size) this._onBalancesChanged(balances);\n\n        this._onHeadChange(header);\n    }\n\n    /**\n     * @returns {Array<Account>} An array element can be NULL if account does not exist\n     */\n    async _getAccounts(addresses, stackHeight) {\n        if (addresses.length === 0) return [];\n        await this._consensusEstablished;\n        let accounts;\n        const addressesAsAddresses = addresses.map(address => Nimiq.Address.fromUserFriendlyAddress(address));\n        try {\n            accounts = await this._consensus.getAccounts(addressesAsAddresses);\n        } catch (e) {\n            stackHeight = stackHeight || 0;\n            stackHeight++;\n            return await new Promise(resolve => {\n                const timeout = 1000 * stackHeight;\n                setTimeout(async _ => {\n                    resolve(await this._getAccounts(addresses, stackHeight));\n                }, timeout);\n                console.warn(`Could not retrieve accounts from consensus, retrying in ${timeout / 1000} s`);\n            });\n        }\n\n        return accounts;\n    }\n\n    /**\n     * @param {Array<string>} addresses\n     */\n    async _subscribeAddresses(addresses) {\n        addresses.forEach(address => this._balances.set(address, 0));\n\n        const addressesAsAddresses = addresses.map(address => Nimiq.Address.fromUserFriendlyAddress(address));\n        await this._consensusEstablished;\n        this._consensus.subscribeAccounts(addressesAsAddresses);\n    }\n\n    /**\n     * @param {Array<string>} addresses\n     * @returns {Map}\n     */\n    async _getBalances(addresses) {\n        let accounts = await this._getAccounts(addresses);\n\n        const balances = new Map();\n\n        accounts.forEach((account, i) => {\n            const address = addresses[i];\n            const balance = account ? account.balance / NanoNetworkApi.satoshis : 0 ;\n            balances.set(address, balance);\n        });\n\n        return balances;\n    }\n\n    /**\n     * @param {string} address\n     * @param {Map} [knownReceipts] A map with the tx hash as key and the blockhash as value\n     * @param {uint} [fromHeight]\n     */\n    async _requestTransactionHistory(address, knownReceipts = new Map(), fromHeight = 0) {\n        await this._consensusEstablished;\n        address = Nimiq.Address.fromUserFriendlyAddress(address);\n\n        // Inpired by Nimiq.BaseConsensus._requestTransactionHistory()\n\n        // 1. Get transaction receipts.\n        let receipts = await this._consensus._requestTransactionReceipts(address);\n        // console.log(`Received ${receipts.length} receipts from the network.`);\n\n        // 2 Filter out known receipts.\n        const knownTxHashes = [...knownReceipts.keys()];\n\n        receipts = receipts.filter(receipt => {\n            if (receipt.blockHeight < fromHeight) return false;\n\n            const hash = receipt.transactionHash.toBase64();\n\n            // Known transaction\n            if (knownTxHashes.includes(hash)) {\n                // Check if block has changed\n                return receipt.blockHash.toBase64() !== knownReceipts.get(hash);\n            }\n\n            // Unknown transaction\n            return true;\n        });\n        // console.log(`Reduced to ${receipts.length} unknown receipts.`);\n\n        // FIXME TODO: Check for tx that have been removed from the blockchain!\n\n        // 3. Request proofs for missing blocks.\n        /** @type {Array.<Promise.<Block>>} */\n        const blockRequests = [];\n        let lastBlockHash = null;\n        for (const receipt of receipts) {\n            if (!receipt.blockHash.equals(lastBlockHash)) {\n                // eslint-disable-next-line no-await-in-loop\n                const block = await this._consensus._blockchain.getBlock(receipt.blockHash);\n                if (block) {\n                    blockRequests.push(Promise.resolve(block));\n                } else {\n                    const request = this._consensus._requestBlockProof(receipt.blockHash, receipt.blockHeight)\n                        .catch(e => console.error(NanoNetworkApi, `Failed to retrieve proof for block ${receipt.blockHash}`\n                            + ` (${e.message || e}) - transaction history may be incomplete`));\n                    blockRequests.push(request);\n                }\n\n                lastBlockHash = receipt.blockHash;\n            }\n        }\n        const blocks = await Promise.all(blockRequests);\n\n        // 4. Request transaction proofs.\n        const transactionRequests = [];\n        for (const block of blocks) {\n            if (!block) continue;\n\n            const request = this._consensus._requestTransactionsProof([address], block)\n                .then(txs => txs.map(tx => ({ transaction: tx, header: block.header })))\n                .catch(e => console.error(NanoNetworkApi, `Failed to retrieve transactions for block ${block.hash}`\n                    + ` (${e.message || e}) - transaction history may be incomplete`));\n            transactionRequests.push(request);\n        }\n\n        const transactions = await Promise.all(transactionRequests);\n        return transactions\n            .reduce((flat, it) => it ? flat.concat(it) : flat, [])\n            .sort((a, b) => a.header.height - b.header.height);\n    }\n\n    __consensusEstablished() {\n        this._consensusEstablishedResolver();\n        this._headChanged(this._consensus.blockchain.head);\n        this._onConsensusEstablished();\n    }\n\n    _consensusLost() {\n        this._createConsensusPromise();\n        this._onConsensusLost();\n    }\n\n    _transactionAdded(tx) {\n        const recipientAddr = tx.recipient.toUserFriendlyAddress();\n        const senderAddr = tx.sender.toUserFriendlyAddress();\n        const trackedAddresses = new Set(this._balances.keys());\n\n        if (trackedAddresses.has(senderAddr) || trackedAddresses.has(recipientAddr)) {\n            this._onTransactionPending(senderAddr, recipientAddr, tx.value / NanoNetworkApi.satoshis, tx.fee / NanoNetworkApi.satoshis, tx.hash().toBase64());\n        }\n    }\n\n    _transactionMined(tx, header) {\n        const recipientAddr = tx.recipient.toUserFriendlyAddress();\n        const senderAddr = tx.sender.toUserFriendlyAddress();\n        const trackedAddresses = new Set(this._balances.keys());\n\n        if (trackedAddresses.has(recipientAddr) || trackedAddresses.has(senderAddr)) {\n            this._onTransactionMined(senderAddr, recipientAddr, tx.value / NanoNetworkApi.satoshis, tx.fee / NanoNetworkApi.satoshis, tx.hash().toBase64(), header.height, header.timestamp);\n        }\n    }\n\n    _createConsensusPromise() {\n        this._consensusEstablished = new Promise(resolve => {\n            this._consensusEstablishedResolver = resolve;\n        });\n    }\n\n    _globalHashrate(difficulty) {\n        return Math.round(difficulty * Math.pow(2, 16) / Nimiq.Policy.BLOCK_TIME);\n    }\n\n    /*\n        Public API\n\n        @param {Object} obj: {\n            sender: <user friendly address>,\n            senderPubKey: <serialized public key>,\n            recipient: <user friendly address>,\n            value: <value in NIM>,\n            fee: <fee in NIM>,\n            validityStartHeight: <integer>,\n            signature: <serialized signature>\n        }\n    */\n    async relayTransaction(obj) {\n        await this._consensusEstablished;\n        const senderPubKey = Nimiq.PublicKey.unserialize(Nimiq.SerialBuffer.from(obj.senderPubKey));\n        const recipientAddr = Nimiq.Address.fromUserFriendlyAddress(obj.recipient);\n        const value = Nimiq.Policy.coinsToSatoshis(obj.value);\n        const fee = Nimiq.Policy.coinsToSatoshis(obj.fee);\n        const validityStartHeight = parseInt(obj.validityStartHeight);\n        const signature = Nimiq.Signature.unserialize(Nimiq.SerialBuffer.from(obj.signature));\n\n        const tx = new Nimiq.BasicTransaction(senderPubKey, recipientAddr, value, fee, validityStartHeight, signature);\n\n        return this._consensus.relayTransaction(tx);\n    }\n\n    /**\n     * @param {string|Array<string>} addresses\n     */\n    async subscribe(addresses) {\n        if (!(addresses instanceof Array)) addresses = [addresses];\n\n        this._subscribeAddresses(addresses);\n\n        const balances = await this._getBalances(addresses);\n        for (const [address, balance] of balances) { this._balances.set(address, balance); }\n\n        this._onBalancesChanged(balances);\n    }\n\n    /**\n     * @param {string|Array<string>} addresses\n     * @returns {Map}\n     */\n    getBalance(addresses) {\n        if (!(addresses instanceof Array)) addresses = [addresses];\n\n        const balances = this._getBalances(addresses);\n        for (const [address, balance] of balances) { this._balances.set(address, balance); }\n\n        return balances;\n    }\n\n    async getAccountTypeString(address) {\n        const account = (await this._getAccounts([address]))[0];\n\n        if (!account) return 'basic';\n\n        // See Nimiq.Account.Type\n        switch (account.type) {\n            case Nimiq.Account.Type.BASIC: return 'basic';\n            case Nimiq.Account.Type.VESTING: return 'vesting';\n            case Nimiq.Account.Type.HTLC: return 'htlc';\n            default: return false;\n        }\n    }\n\n    async requestTransactionHistory(addresses, knownReceipts, fromHeight) {\n        if (!(addresses instanceof Array)) addresses = [addresses];\n\n        let txs = await Promise.all(addresses.map(address => this._requestTransactionHistory(address, knownReceipts, fromHeight)));\n\n        // txs is an array of arrays of objects, which have the format {transaction: Nimiq.Transaction, header: Nimiq.BlockHeader}\n        // We need to reduce this to usable simple tx objects\n\n        // First, reduce\n        txs = txs.reduce((flat, it) => it ? flat.concat(it) : flat, []);\n\n        // Then map to simple objects\n        txs = txs.map(tx => ({\n            sender: tx.transaction.sender.toUserFriendlyAddress(),\n            recipient: tx.transaction.recipient.toUserFriendlyAddress(),\n            value: tx.transaction.value / NanoNetworkApi.satoshis,\n            fee: tx.transaction.fee / NanoNetworkApi.satoshis,\n            hash: tx.transaction.hash().toBase64(),\n            blockHeight: tx.header.height,\n            blockHash: tx.header.hash().toBase64(),\n            timestamp: tx.header.timestamp\n        }));\n\n        // Finally, sort the array\n        // return txs.sort((a, b) => a.blockHeight - b.blockHeight);\n        return txs; // Sorting is done in transaction-redux\n    }\n\n    async getGenesisVestingContracts() {\n        await this._apiInitialized;\n        const accounts = [];\n        const buf = Nimiq.BufferUtils.fromBase64(Nimiq.GenesisConfig.GENESIS_ACCOUNTS);\n        const count = buf.readUint16();\n        for (let i = 0; i < count; i++) {\n            const address = Nimiq.Address.unserialize(buf);\n            const account = Nimiq.Account.unserialize(buf);\n\n            if (account.type === 1) {\n                accounts.push({\n                    address: address.toUserFriendlyAddress(),\n                    // balance: account.balance / NanoNetworkApi.satoshis,\n                    owner: account.owner.toUserFriendlyAddress(),\n                    start: account.vestingStart,\n                    stepAmount: account.vestingStepAmount / NanoNetworkApi.satoshis,\n                    stepBlocks: account.vestingStepBlocks,\n                    totalAmount: account.vestingTotalAmount / NanoNetworkApi.satoshis\n                });\n            }\n        }\n        return accounts;\n    }\n\n    _onInitialized() {\n        // console.log('Nimiq API ready to use');\n        this.fire('nimiq-api-ready');\n    }\n\n    _onConsensusSyncing() {\n        // console.log('consensus syncing');\n        this.fire('nimiq-consensus-syncing');\n    }\n\n    _onConsensusEstablished() {\n        // console.log('consensus established');\n        this.fire('nimiq-consensus-established');\n    }\n\n    _onConsensusLost() {\n        // console.log('consensus lost');\n        this.fire('nimiq-consensus-lost');\n    }\n\n    _onBalancesChanged(balances) {\n        // console.log('new balances:', balances);\n        this.fire('nimiq-balances', balances);\n    }\n\n    _onTransactionPending(sender, recipient, value, fee, hash) {\n        // console.log('pending:', { sender, recipient, value, fee, hash });\n        this.fire('nimiq-transaction-pending', { sender, recipient, value, fee, hash });\n    }\n\n    _onTransactionMined(sender, recipient, value, fee, hash, blockHeight, timestamp) {\n        // console.log('mined:', { sender, recipient, value, fee, hash, blockHeight, timestamp });\n        this.fire('nimiq-transaction-mined', { sender, recipient, value, fee, hash, blockHeight, timestamp });\n    }\n\n    _onDifferentTabError(e) {\n        // console.log('Nimiq API is already running in a different tab:', e);\n        this.fire('nimiq-different-tab-error', e);\n    }\n\n    _onInitializationError(e) {\n        // console.log('Nimiq API could not be initialized:', e);\n        this.fire('nimiq-api-fail', e);\n    }\n\n    _onHeadChange(header) {\n        // console.log('height changed:', height);\n        this.fire('nimiq-head-change', {\n            height: header.height,\n            globalHashrate: this._globalHashrate(header.difficulty)\n        });\n    }\n\n    _onPeersChanged() {\n        // console.log('peers changed:', this._consensus.network.peerCount);\n        this.fire('nimiq-peer-count', this._consensus.network.peerCount);\n    }\n\n    static _importApi() {\n        return new Promise((resolve, reject) => {\n            let script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = NanoNetworkApi.API_URL;\n            script.addEventListener('load', () => resolve(script), false);\n            script.addEventListener('error', () => reject(script), false);\n            document.body.appendChild(script);\n        });\n    }\n\n    fire() {\n        throw new Error('The fire() method needs to be overloaded!');\n    }\n}\n\n// todo replace master by release before release!\n","import { EventServer, RPC } from '/libraries/boruca-messaging/src/boruca.js';\nimport NanoNetworkApi from '/libraries/nano-api/nano-network-api.js';\n\nclass Network {\n    constructor() {\n        this.connect();\n    }\n\n    async connect() {\n        const eventServer = new EventServer();\n        const network = RPC.Server(NanoNetworkApi);\n        network.fire = (event, value) => eventServer.fire(event, value);\n\n        // TODO: Init network with the GenesisConfig that we want\n        // TODO: Make the GenesisConfig configurable\n\n        await network.connect();\n    }\n}\n\nnew Network();\n"],"names":[],"mappings":"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"}